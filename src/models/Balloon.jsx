/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: carlin.chu (https://sketchfab.com/carlin.chu)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/hot-air-balloon-9fef383df15c40659a89ba1036a9b9e4
Title: Hot air balloon
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import ballonScene from '../assets/3d/hot_air_balloon.glb'
import { useFrame, useThree } from "@react-three/fiber";

const Balloon = ({ toggleShowPlane }) => {
    const ref = useRef();
    const { scene, animations } = useGLTF(ballonScene);
    const { actions } = useAnimations(animations, ref);

    const { gl, viewport } = useThree();


    const handlePointerEnter = () => {
        gl.domElement.style.cursor = 'default';
    }

    const handleBalloonClick = () => {
        toggleShowPlane();
        // showPlane = true;
        // console.log('show Plane', showPlane)
        // Open Google.com in a new tab
        // window.open("https://www.amazon.com", "_blank");
    };

    const adjustBalloonForScreenSize = () => {
        let position;
        let screenScale;
        if (window.innerWidth < 500) {
            position = [-7, 4, -11]
            screenScale = [8, 8, 8]
        }
        else {
            position = [-15, 4, -11]
            screenScale = [10, 10, 10]
        }

        return [position, screenScale]
    }

    const [balloonPosition, balloonScale] = adjustBalloonForScreenSize();


    useEffect(() => {

        actions['Take 001'].play();

        // const canvas = gl.domElement;

        // console.log('CANVAS', canvas)
        // // canvas.addEventListener('pointermove', handleCloudClick);
        // canvas.addEventListener('pointerEnter', handlePointerEnter);
        // canvas.addEventListener('onClick', handleBalloonClick);
        // // canvas.addEventListener('pointermove', handlePointerMove);
        // // document.addEventListener('keydown', handleKeyDown);
        // window.addEventListener('pointerdown', handleBalloonClick);

        // return () => {
        //     document.removeEventListener('pointerdown', handleBalloonClick);
        // canvas.removeEventListener('pointerEnter', handlePointerEnter);
        // canvas.removeEventListener('onClick', handleBalloonClick);
        // canvas.removeEventListener('pointermove', handlePointerMove);
        // document.removeEventListener('keydown', handleKeyDown);
        // document.removeEventListener('keyup', handleKeyUp);
        // }
    }, [gl, handlePointerEnter, handleBalloonClick])




    useFrame(({ clock, camera }) => {
        // Update the Y position to simulate balloon-like motion using a sine wave
        ref.current.position.y = Math.sin(clock.elapsedTime) * 0.2 + 4;

        // Check if the balloon reached a certain endpoint relative to the camera
        if (ref.current.position.x > camera.position.x + 10) {
            // Change direction to backward and rotate the balloon 180 degrees on the y-axis
            ref.current.rotation.y = Math.PI;
        } else if (ref.current.position.x < camera.position.x - 10) {
            // Change direction to forward and reset the balloon's rotation
            ref.current.rotation.y = 0;
        }

        // Update the X and Z positions based on the direction
        if (ref.current.rotation.y === 0) {
            // Moving forward
            ref.current.position.x += 0.01;
            ref.current.position.z -= 0.01;
        } else {
            // Moving backward
            ref.current.position.x -= 0.01;
            ref.current.position.z += 0.01;
        }
    });

    useFrame((_, delta) => {
        ref.current.rotation.Y += 0.15 * delta;
    })

    return (
        <mesh
            position={balloonPosition}
            // position={[-15, 4, -11]}
            // scale={[10, 10, 10]}
            scale={balloonScale}
            ref={ref}
            // onPointerEnter={handlePointerEnter}

            onClick={handleBalloonClick}
            onPointerDown={handleBalloonClick}
        >
            <primitive object={scene} />
        </mesh>
    )
}

useGLTF.preload("/hot_air_balloon.glb");

export default Balloon