/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: carlin.chu (https://sketchfab.com/carlin.chu)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/hot-air-balloon-9fef383df15c40659a89ba1036a9b9e4
Title: Hot air balloon
*/

import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import scene from '../assets/3d/hot_air_balloon.glb'

const Balloon_Test = (props) => {
    const group = useRef();
    const { nodes, materials, animations } = useGLTF(scene);
    // const { nodes, materials, animations } = useGLTF("../assets/3d/hot_air_balloon.glb");
    const { actions } = useAnimations(animations, group);



    const adjustBalloonForScreenSize = () => {
        let position;
        let screenScale;
        if (window.innerWidth < 500) {
            position = [-7, 4, -11]
            screenScale = [0.7, 0.7, 0.7]
        }
        else {
            position = [-15, 4, -11]
            screenScale = [1, 1, 1]
        }

        return [position, screenScale]
    }

    const [balloonPosition, balloonScale] = adjustBalloonForScreenSize();


    useEffect(() => {
        actions['Take 001'].play();
    }, [])


    useFrame(({ clock, camera }) => {
        // Update the Y position to simulate balloon-like motion using a sine wave
        group.current.position.y = Math.sin(clock.elapsedTime) * 0.2 + 4;

        // Check if the balloon reached a certain endpoint relative to the camera
        if (group.current.position.x > camera.position.x + 10) {
            // Change direction to backward and rotate the balloon 180 degrees on the y-axis
            group.current.rotation.y = Math.PI;
        } else if (group.current.position.x < camera.position.x - 10) {
            // Change direction to forward and reset the balloon's rotation
            group.current.rotation.y = 0;
        }

        // Update the X and Z positions based on the direction
        if (group.current.rotation.y === 0) {
            // Moving forward
            group.current.position.x += 0.01;
            group.current.position.z -= 0.01;
        } else {
            // Moving backward
            group.current.position.x -= 0.01;
            group.current.position.z += 0.01;
        }
    });

    useFrame((_, delta) => {
        group.current.rotation.Y += 0.15 * delta;
    })


    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Sketchfab_Scene">
                <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}
                    // position={balloonPosition}
                    position={[2, -2, -7]}
                    scale={balloonScale}
                >
                    <group
                        name="564d5998c2ae4a5f85a602f77fb33fc1fbx"
                        rotation={[Math.PI / 2, 0, 0]}
                        scale={0.1}

                    >
                        <group name="Object_2">
                            <group name="RootNode">
                                <group name="hot_air_balloon">
                                    <group name="pCube1" position={[0, -0.002, 0]}>
                                        <mesh
                                            name="pCube1_balloon_0"
                                            castShadow
                                            receiveShadow
                                            geometry={nodes.pCube1_balloon_0.geometry}
                                            material={materials.balloon}
                                        />
                                    </group>
                                    <group name="pCube2">
                                        <mesh
                                            name="pCube2_balloon_0"
                                            castShadow
                                            receiveShadow
                                            geometry={nodes.pCube2_balloon_0.geometry}
                                            material={materials.balloon}
                                        />
                                    </group>
                                    <group name="pCylinder1">
                                        <mesh
                                            name="pCylinder1_balloon_0"
                                            castShadow
                                            receiveShadow
                                            geometry={nodes.pCylinder1_balloon_0.geometry}
                                            material={materials.balloon}
                                        />
                                    </group>
                                    <group name="pCylinder2">
                                        <mesh
                                            name="pCylinder2_balloon_0"
                                            castShadow
                                            receiveShadow
                                            geometry={nodes.pCylinder2_balloon_0.geometry}
                                            material={materials.balloon}
                                        />
                                    </group>
                                    <group name="pCylinder3">
                                        <mesh
                                            name="pCylinder3_balloon_0"
                                            castShadow
                                            receiveShadow
                                            geometry={nodes.pCylinder3_balloon_0.geometry}
                                            material={materials.balloon}
                                        />
                                    </group>
                                    <group name="pCylinder4">
                                        <mesh
                                            name="pCylinder4_balloon_0"
                                            castShadow
                                            receiveShadow
                                            geometry={nodes.pCylinder4_balloon_0.geometry}
                                            material={materials.balloon}
                                        />
                                    </group>
                                </group>
                            </group>
                        </group>
                    </group>
                </group>
            </group>
        </group>
    );
}

// useGLTF.preload("/hot_air_balloon.glb");
export default Balloon_Test
