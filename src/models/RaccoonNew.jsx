/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Malbers Animations (https://sketchfab.com/malbers.shark87)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/poly-art-raccoon-093e7d8dba2c47118aff1126f461cb7f
Title: Poly Art Raccoon
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { AnimationMixer, AnimationUtils } from 'three'
import { Clock } from 'three'
import { useFrame } from '@react-three/fiber'
import scene from '../assets/3d/poly_art_raccoon.glb'


// insert UCSD raccoon vid
// https://www.reddit.com/r/UCSD/comments/qxc16u/just_some_raccoons/

const RaccoonNew = ({ currentAnimation, isRotating, showPlane, ...props }) => {
    const group = useRef();
    const { nodes, materials, animations } = useGLTF(scene);
    const { actions } = useAnimations(animations, group);

    const [isWaving, setIsWaving] = useState(false);
    const mixer = useRef();

    useEffect(() => {

        // actions.Action_Crawl.setDuration(3).play();
        // console.log(actions);
        // console.log('raccoon action', actions.Action_Crawl)
        // console.log(actions.Eating)
        const mixerInstance = new AnimationMixer(group.current);
        mixer.current = mixerInstance;

        // const crawlClip = actions.Action_Dig.getClip();
        // const crawlClip = actions.Action_Crawl.getClip();
        const crawlClip = actions.Action_Eat.getClip();
        // const crawlClip = actions.Roll.getClip();
        // console.log('clip', crawlClip)
        const crawlSubClip = AnimationUtils.subclip(crawlClip, 'crawl_subClip', 0, 1000, true);
        // console.log('subclip', crawlSubClip) 
        const crawlSubClipAction = mixerInstance.clipAction(crawlSubClip);
        // crawlSubClipAction.enabled = true;
        // crawlSubClipAction.setEffectiveTimeScale(1)
        // crawlSubClipAction.setEffectiveWeight(1)

        ///////////// 2nd action
        const digClip = actions.Action_Dig.getClip();
        // const digClip = actions.Roll.getClip();
        // console.log('Dig', digClip)
        const digSubClip = AnimationUtils.subclip(digClip, 'dig_subClip', 23.2, 24.5, true);
        // console.log('subDig', digSubClip)
        const digSubClipAction = mixerInstance.clipAction(digSubClip);
        /////////


        ///////////// 3nd action: Swim_Idle is a good choice *********
        const walkClip = actions.Swim_Idle.getClip();
        // console.log('walk', walkClip)
        const walkSubClip = AnimationUtils.subclip(walkClip, 'walk_subClip', 1, 1000, true);
        // console.log('subwalk', walkSubClip)
        const walkSubClipAction = mixerInstance.clipAction(walkSubClip).setDuration(0.7);


        // SLOW DOWN FOR NIGHT TIME

        if (showPlane) {
            const walkSubClipAction = mixerInstance.clipAction(walkSubClip).setDuration(1.7);
        };


        /////////
        // NIGHT TIME IDLE

        // const lieClip = actions.Sneak_Idle.getClip();
        const lieClip = actions.Idle_Yaw.getClip();
        // const lieClip = actions.Lie_Idle_2.getClip();
        // console.log('lie', lieClip)
        const lieSubClip = AnimationUtils.subclip(lieClip, 'lie_subClip', 1, 1000, true);
        // console.log('sublie', lieSubClip)
        // const lieSubClipAction = mixerInstance.clipAction(lieSubClip).setDuration(2.5);
        const lieSubClipAction = mixerInstance.clipAction(lieSubClip);
        //////////////////////////////////

        ///////////// 4th action: Jump_In_Place: cool for Contact Page when clicked on
        const jumpClip = actions.Jump_In_Place.getClip();
        // console.log('jump', jumpClip)
        const jumpSubClip = AnimationUtils.subclip(jumpClip, 'jump_subClip', 1, 1000, true);
        // console.log('subjump', jumpSubClip)
        const jumpSubClipAction = mixerInstance.clipAction(jumpSubClip);
        /////////


        ///////////// TRYING TO DO SOMETHING EVERY 10s

        // // Subclip "Wave_Hand" action
        // const waveHandClip = actions.Roll.getClip();
        // const waveHandSubClip = AnimationUtils.subclip(waveHandClip, 'wave_hand_subClip', 0, 1000, true);
        // const waveHandSubClipAction = mixerInstance.clipAction(waveHandSubClip);

        // const playWaveHand = () => {
        //     setIsWaving(true);
        //     waveHandSubClipAction.play();
        //     setTimeout(() => {
        //         setIsWaving(false);
        //     }, 9000); // Adjust this timeout to match the duration of the "Wave_Hand" action
        // };

        // const waveHandInterval = setInterval(playWaveHand, 5000);


        ////////////


        if (!isRotating) {
            // // jumpSubClipAction.stop()
            // walkSubClipAction.stop();
            // crawlSubClipAction.play();
            // // digSubClipAction.stop()
            if (showPlane) {
                lieSubClipAction.play();
                walkSubClipAction.stop();
            } else {
                walkSubClipAction.stop();
                crawlSubClipAction.play();
            }
        }
        else {
            // // jumpSubClipAction.play();
            // walkSubClipAction.play();
            // crawlSubClipAction.stop();
            // // digSubClipAction.play();

            if (showPlane) {
                lieSubClipAction.stop();
                walkSubClipAction.play();
            } else {
                walkSubClipAction.play();
                crawlSubClipAction.stop();
            }

        }

        // console.log('raccoon trimmed', crawlSubClipAction)
        return () => {
            // clearInterval(waveHandInterval);
            mixerInstance.stopAllAction();
        };
    }, [actions, isRotating, isWaving, showPlane]);

    useFrame((_, delta) => {
        if (mixer.current) {
            // console.log('delta', delta)
            mixer.current.update(delta);
            // mixer.current.update(0.010);
        }
    }, [actions, currentAnimation]);

    // useEffect(() => {
    //     console.log(actions)

    //     Object.values(actions).forEach((action) => action.stop());

    //     if (actions[currentAnimation]) {
    //         actions[currentAnimation].play();
    //         // console.log('current animation: ', currentAnimation);
    //     }


    // }, [actions, currentAnimation])

    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Sketchfab_Scene">
                <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
                    <group
                        name="d694477a516e4500907a8e651d27b4d1fbx"
                        rotation={[Math.PI / 2, 0, 0]}
                    >
                        <group name="Object_2">
                            <group name="RootNode">
                                <group
                                    name="CG"
                                    position={[0, 33.046, 0]}
                                    rotation={[-1.605, -0.004, -1.449]}
                                >
                                    <group name="Object_5">
                                        <primitive object={nodes._rootJoint} />
                                        <skinnedMesh
                                            name="Object_64"
                                            geometry={nodes.Object_64.geometry}
                                            material={materials.Material_28}
                                            skeleton={nodes.Object_64.skeleton}
                                        />
                                        <group name="Object_63" rotation={[-Math.PI / 2, 0, 0]} />
                                    </group>
                                </group>
                                <group
                                    name="Raccoon_Poly_Art"
                                    rotation={[-Math.PI / 2, 0, 0]}
                                />
                            </group>
                        </group>
                    </group>
                </group>
            </group>
        </group>
    );
}

// useGLTF.preload("/poly_art_raccoon.glb");

export default RaccoonNew;